import graphqlHTTP from 'express-graphql';import {buildSchema} from 'graphql';const cors = require('cors');/** * GraphQL tutorial * - graphql object types, when u want to re-use methods * tu run examples from this tutorial go to: * > http://localhost:4000/graphql-objects * and run: {   dice(numSides: 6) {     numSides,     rollOnce     roll,     name   } } *//** * RandomDie will be exposed to be queried in graphql, * like:    name    rollOnce    roll * */class RandomDie{  constructor(numSides) {    this.name = 'Test Die name';    this.numSides = numSides;  }  rollOnce() {    return 1 + Math.floor(Math.random() * this.numSides);  }  roll({numRolls}) {    var output = [];    for (var i = 0; i < numRolls; i++) {      output.push(this.rollOnce());    }    return output;  }}export default class GraphQL {  app;  constructor(app) {    this.app = app;    // Construct a schema, using GraphQL schema language    // schema will describe all fields that GraphQL can be query about    // type RandomDie ( can't be queried ), class to be used in Query    // type query - is the only thing that can be queried !    var schema = buildSchema(`      type RandomDie {        name      : String        numSides  : Int!        rollOnce  : Int        roll      : Int      }      type Query {        dice(numSides: Int): RandomDie      }    `);    // The root provides a resolver function for each API endpoint    var root = {      // resolve dice      // return dice new object      dice: ({numSides}) => {        return new RandomDie(numSides);      }    };    // register graphql-objects    // example is using cors() to allow calls from :3000 to :4000    // schema - defines schema    // rootValue - defines root schema values    this.app.use('/graphql-objects', cors(), graphqlHTTP({      schema: schema,      rootValue: root,      graphiql: true,    }));  }}