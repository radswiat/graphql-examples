import graphqlHTTP from 'express-graphql';import {buildSchema} from 'graphql';const cors = require('cors');/** * GraphQL tutorial, * tu run examples from this tutorial go to: * > http://localhost:4000/graphql-simple * and run: {   quote,   random,   shoppingList,   dice(numDice: 5, numSides: 6) } */export default class GraphQL {  app;  constructor(app) {    this.app = app;    // Construct a schema, using GraphQL schema language    // schema will describe all fields that GraphQL can be query about    // String - means a type of string ( returns )    // [String] - means its a array of strings ( returns )    // xxx(numDice: Int, numSides: Int) : [Int] - means its a method, called with 2 args, returns array of Int's    var schema = buildSchema(`      type Query {        quote: String,        random: Float!,        shoppingList: [String],        dice(numDice: Int!, numSides: Int) : [Int]      }    `);    // The root provides a resolver function for each API endpoint    var root = {      // resolve quote query      // return random string      quote: () => {        return Math.random() < 0.5 ? 'Take it easy' : 'Salvation lies within';      },      // resolve random query      // return random number      random: () => {        return Math.random();      },      // resolve shoppingList      // return string array      shoppingList: () => {        return ['Milk', 'Sugar', 'Salt', 'Meat']      },      // resolve dice      // return dice's depends on args      dice: (args) => {        var output = [];        for(var i = 0; i < args.numDice; i++ ) {          output.push(1 + Math.floor(Math.random() * (args.numSides || 6)));        }        return output;      }    };    // register graphql-simple    // example is using cors() to allow calls from :3000 to :4000    // schema - defines schema    // rootValue - defines root schema values    this.app.use('/graphql-simple', cors(), graphqlHTTP({      schema: schema,      rootValue: root,      graphiql: true,    }));  }}