/*eslint-disable */const path = require('path');const webpack = require('webpack');const webpackDevMiddleware = require('webpack-dev-middleware');const webpackHotMiddleware = require('webpack-hot-middleware');const HtmlWebpackPlugin = require('html-webpack-plugin');const CopyWebpackPlugin = require('copy-webpack-plugin');const ExtendedDefinePlugin = require('extended-define-webpack-plugin');const PUBLIC_PATH = '';const BASE_PATH = '';const PUBLIC_PATH_RES = '../../../';/** * Webpack configuration class * TODO: make use of a class */var webpackConfig = {  context: __dirname,  entry: {    index: [path.resolve(BASE_PATH, 'src/client/app/app.js'), 'webpack-hot-middleware/client', 'webpack/hot/dev-server']  },  output: {    filename: 'main.js',    publicPath: `/${PUBLIC_PATH}`,    path: path.resolve(BASE_PATH, 'dist/')  },  resolve: {    extensions: ['', '.jsx', '.js', '.html', '.png', '.svg', '.jpg', '.jpeg', '.png']  },  module: {    loaders: [      {        test: /\.jsx?/,        loader: 'babel-loader',        include: [          path.resolve('src/client')        ],        exclude: [          /node_modules/        ]      },      {        test: /\.html$/,        loader: 'raw-loader'      },      {        test: /\.scss$/,        loaders: ["style", "css", "sass"]      },      {        test: /\.(jpe?g|png|gif|svg)$/i,        loaders: [          // 'file?hash=sha512&digest=hex&name=[hash].[ext]',          'image-webpack'        ]      },      {        test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,        loader: 'url-loader?limit=10000&mimetype=application/font-woff'      },      {        test: /\.(eot|ttf|svg)$/,        loader: 'file-loader',        query: {          name: '[hash].[ext]'        }      }    ]  },  plugins: [    new webpack.HotModuleReplacementPlugin(),    new webpack.NoErrorsPlugin(),    // new CopyWebpackPlugin([    //   {context:  path.resolve(BASE_PATH, 'src/static'), from: '**/*', to: 'static'},    //   {context:  path.resolve(BASE_PATH, 'src/static'), from: '**/*.png', to: 'static'}    // ]),    // new ExtendedDefinePlugin({    //   WEBPACK_CONFIG: {    //     PUBLIC_PATH: `${PUBLIC_PATH_RES}`    //   },    // }),    new HtmlWebpackPlugin({      title: 'Lab GraphQL',      filename: 'index.html',      template: path.resolve(BASE_PATH, 'src/client/index.html')    })  ]};/** * Webpack dev server */export class WebpackServer {  webpackConfig = null;  express = null;  constructor(config) {    this.webpackConfig = config;    this.express = require('express');    this.compiler = webpack(this.webpackConfig);    this.app = this.express();    this.setMiddleware();  }  setMiddleware() {    // midleware to simulate server long responses    this.app.use(function (req, res, next) {      if (/(\.json)$/.test(req.url)) {        setTimeout(next, 2000);        return;      }      next();    });    this.app.use(webpackDevMiddleware(this.compiler, {      noInfo: false,      publicPath: this.webpackConfig.output.publicPath,      hot: true,      stats: {colors: true}    }));    this.app.use(webpackHotMiddleware(this.compiler));  }  createServer() {    this.app.get("/", function (req, res) {      res.sendFile(__dirname + '/index.html');    });    this.app.listen(3000);  }}const server = new WebpackServer(webpackConfig);server.createServer();